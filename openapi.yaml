openapi: 3.0.2
info:
  title: Merkez API Specification
  version: '0.1'
  description: |-
    API Specification for Merkez institute, based on [software requirements document](https://whimsical.com/software-requirements-specification-AHLth8LbaqS17rmKiEQAyd).
    This specification is the single source of truth for Merkez REST API. 

    These links are useful to understand the api design:
    1. [RESTful web API design](https://learn.microsoft.com/en-us/azure/architecture/best-practices/api-design)
    2. [REST API Best Practices â€“ REST Endpoint Design Examples](https://www.freecodecamp.org/news/rest-api-best-practices-rest-endpoint-design-examples/)
  termsOfService: https://www.merkez.com/terms
  license:
    name: GNU General Public License 3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html
  contact:
    name: API Support
    email: support@merkez.com
    url: https://www.merkez.com/support
servers:
  - url: https://dev.merkez.com/v1
    description: Development Server
  - url: https://staging.merkez.com/v1
    description: Staging Server
  - url: https://api.merkez.com/v1
    description: Production Server
paths:
  /auth/login:
    post:
      operationId: loginUser
      tags:
        - auth
      summary: Login with existing user
      description: Returns JWT token when credential is valid
      requestBody:
        description: credential needed to login the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: successfull login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '401':
          description: bad credential
  /auth/logout:
    get:
      operationId: logoutUser
      tags:
        - auth
      summary: Logout the current login user
      description: Logout the user and return nothing
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /auth/register:
    post:
      operationId: registerUser
      tags:
        - auth
      summary: Register the user
      description: Return the data of the registered user
      requestBody:
        description: Object needed to register the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: successfull registration and creation of user
        '400':
          description: invalid request body
  /auth/password/recover:
    post:
      operationId: recoverPassword
      tags:
        - auth
      summary: send email that contains link to reset password
      description: Returns nothing when user with provided email is exist, otherwise return error.
      requestBody:
        description: object contain email to recover password
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john.doe@gmail.com
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '404':
          $ref: '#/components/responses/NotFoundError'
    patch:
      operationId: resetPassword
      tags:
        - auth
      summary: random link to provide new password
      description: this will be random link generated by server for user to provide their new password.
      requestBody:
        description: object contains new password
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  example: secret321
                confirmPassword:
                  type: string
                  example: secret321
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '400':
          description: bad request
  /auth/password/change:
    patch:
      operationId: changePassword
      tags:
        - auth
      summary: change password
      description: Returns nothing when password is changed successfully.
      requestBody:
        description: object contain email to recover password
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  example: secret123
                newPassword:
                  type: string
                  example: secret321
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '400':
          description: bad request (wrong old password)
      security:
        - bearerAuth: []
  /courses:
    get:
      operationId: getCourses
      tags:
        - courses
      summary: Get all courses
      description: Returns all courses
      responses:
        '200':
          description: successfull retrieval
        '204':
          $ref: '#/components/responses/SuccessNoContent'
    post:
      operationId: addCourse
      tags:
        - courses
      summary: Add new course
      description: Returns the created course
      requestBody:
        description: Object needed to create new course
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '201':
          description: successfull creation
        '400':
          description: invalid request body
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
      security:
        - bearerAuth: []
  /courses/{courseId}:
    get:
      operationId: getCourseById
      tags:
        - courses
      summary: Get single course
      description: Returns single course
      parameters:
        - name: courseId
          in: path
          description: ID of course to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successfull retrieval
        '404':
          $ref: '#/components/responses/NotFoundError'
    patch:
      operationId: updateCourse
      tags:
        - courses
      summary: Update single course
      description: Returns the updated course
      parameters:
        - name: courseId
          in: path
          description: ID of course to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Object needed to update the existing course
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: successfull update
        '400':
          description: invalid request body
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
    delete:
      operationId: deleteCourse
      tags:
        - courses
      summary: Delete single course
      description: Returns nothing when course is deleted successfully
      parameters:
        - name: courseId
          in: path
          description: ID of course to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
  /categories:
    get:
      operationId: getCategories
      tags:
        - categories
      summary: Get all categories
      description: Returns all categories
      responses:
        '200':
          description: successfull retrieval
        '204':
          $ref: '#/components/responses/SuccessNoContent'
    post:
      operationId: addCategory
      tags:
        - categories
      summary: Add new category
      description: Returns the created category
      requestBody:
        description: Object needed to create new category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: successfull creation
        '400':
          description: invalid request body
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
      security:
        - bearerAuth: []
  /categories/{categoryId}:
    get:
      operationId: getCategoryById
      tags:
        - categories
      summary: Get single category
      description: Returns single category
      parameters:
        - name: categoryId
          in: path
          description: ID of category to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successfull retrieval
        '404':
          $ref: '#/components/responses/NotFoundError'
    patch:
      operationId: updateCategory
      tags:
        - categories
      summary: Update single category
      description: Returns the updated category
      parameters:
        - name: categoryId
          in: path
          description: ID of course to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Object needed to update existing category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: successfull update
        '400':
          description: invalid request body
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
    delete:
      operationId: deleteCategory
      tags:
        - categories
      summary: Delete single category
      description: Returns nothing when category is deleted successfully
      parameters:
        - name: categoryId
          in: path
          description: ID of category to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
  /users:
    get:
      operationId: getUsers
      tags:
        - users
      summary: Get all users
      description: Returns all users
      responses:
        '200':
          description: successfull retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '204':
          $ref: '#/components/responses/SuccessNoContent'
    post:
      operationId: addUser
      tags:
        - users
      summary: Add new user
      description: Returns the created user
      requestBody:
        description: Object needed to create new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: successfull creation
        '400':
          description: invalid request body
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
      security:
        - bearerAuth: []
  /users/{userId}:
    get:
      operationId: getUserById
      tags:
        - users
      summary: Get single user
      description: Returns single user
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successfull retrieval
        '404':
          $ref: '#/components/responses/NotFoundError'
    patch:
      operationId: updateUser
      tags:
        - users
      summary: Update single user
      description: Return the updated user
      parameters:
        - name: userId
          in: path
          description: ID of course to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Object needed to update existing user
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Profile'
      responses:
        '200':
          description: successfull update
        '400':
          description: invalid request body
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
    delete:
      operationId: deleteUser
      tags:
        - users
      summary: Delete single user
      description: Returns nothing when user is deleted successfully
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserLogin:
      type: object
      properties:
        email:
          type: string
          example: iqbal.adudu@gmail.com
        password:
          type: string
          example: secret123
    UserRegister:
      allOf:
        - $ref: '#/components/schemas/UserLogin'
        - type: object
          properties:
            username:
              type: string
              example: iqbaladudu
            phone:
              type: string
              example: '08123456789'
    Assets:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        contentId:
          type: integer
          format: int64
          example: 1
        mediaType:
          type: string
          enum:
            - document
            - image
            - video
        url:
          type: string
          example: https://my-bucket.s3.us-west-2.amazonaws.com
    Content:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: Grammar
        description:
          type: string
          example: Grammar adalah himpunan dari aturan-aturan yang terstruktur yang mengatur susunan kalimat, frase, dan kata dalam bahasa apapun.
        moduleId:
          type: integer
          format: int64
          example: 1
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Assets'
    Module:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: Grammar
        courseId:
          type: integer
          format: int64
          example: 1
        contents:
          type: array
          items:
            $ref: '#/components/schemas/Content'
        createdAt:
          type: string
          example: 01/01/2023
          readOnly: true
        updatedAt:
          type: string
          example: 02/01/2023
          readOnly: true
    Course:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        title:
          type: string
          example: Kursus Bahasa Inggris
        description:
          type: string
          example: Kursus bahasa inggris dengan metode paling mutakhir.
        price:
          type: number
          format: float
          example: 10.5
        duration:
          type: string
          example: 10 hours
        courseTypes:
          type: string
          enum:
            - Freemium
            - Premium
        userId:
          type: integer
          format: int64
          example: 10
        categoryId:
          type: integer
          format: int64
          example: 2
        modules:
          type: array
          items:
            $ref: '#/components/schemas/Module'
        createdAt:
          type: string
          example: 01/01/2023
          readOnly: true
        updatedAt:
          type: integer
          example: 01/01/2023
          readOnly: true
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        name:
          type: string
          example: Hard Skill
        createdAt:
          type: string
          example: 01/01/2023
          readOnly: true
        updatedAt:
          type: string
          example: 01/01/2023
          readOnly: true
    User:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1
              readOnly: true
            userStatus:
              type: string
              enum:
                - active
                - inactive
              readOnly: true
        - $ref: '#/components/schemas/UserRegister'
        - type: object
          properties:
            createdAt:
              type: string
              example: 01/01/2023
              readOnly: true
            updatedAt:
              type: string
              example: 02/01/2023
              readOnly: true
    Address:
      type: object
      properties:
        jalan:
          type: string
          example: Jl. Soekarno hatta
        kecamatan:
          type: string
          example: Tanah Abang
        kabupaten:
          type: string
          description: kabupaten atau kota
          example: ponorogo
        provinsi:
          type: string
          example: Jawa Barat
        Negara:
          type: string
          example: Indonesia
    Profile:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int64
              example: 3
              readOnly: true
            firstName:
              type: string
              example: iqbal
            lastName:
              type: string
              example: adudu
            gender:
              type: string
              enum:
                - Male
                - Female
                - Unknown
            birthDate:
              type: string
              example: 01/01/1999
            address:
              $ref: '#/components/schemas/Address'
        - $ref: '#/components/schemas/User'
  responses:
    SuccessNoContent:
      description: Successfull operation (no content to return)
    UnauthorizedError:
      description: Access token is missing or invalid
    NotFoundError:
      description: Not found / invalid resource ID
    ForbidenError:
      description: Token is valid but operation is not allowed
security: []
