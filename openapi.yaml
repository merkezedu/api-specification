openapi: 3.0.2
info:
  title: Merkez API Specification
  version: '0.1'
  description: |-
    API Specification for Merkez institute, based on [software requirements document](https://whimsical.com/software-requirements-specification-AHLth8LbaqS17rmKiEQAyd).
    This specification is the single source of truth for Merkez REST API. 

    These links are useful to understand the api design:
    1. [RESTful web API design](https://learn.microsoft.com/en-us/azure/architecture/best-practices/api-design)
    2. [REST API Best Practices â€“ REST Endpoint Design Examples](https://www.freecodecamp.org/news/rest-api-best-practices-rest-endpoint-design-examples/)
  termsOfService: https://www.merkez.com/terms
  license:
    name: GNU General Public License 3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html
  contact:
    name: API Support
    email: support@merkez.com
    url: https://www.merkez.com/support
servers:
  - url: https://dev.merkez.com/v1
    description: Development Server
  - url: https://staging.merkez.com/v1
    description: Staging Server
  - url: https://api.merkez.com/v1
    description: Production Server
paths:
  /auth/login:
    post:
      operationId: loginUser
      tags:
        - auth
      summary: Login with existing user
      description: Returns JWT token when credential is valid
      requestBody:
        description: credential needed to login the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: successfull login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '401':
          description: bad credential
  /auth/logout:
    get:
      operationId: logoutUser
      tags:
        - auth
      summary: Logout the current login user
      description: Logout the user and return nothing
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /auth/register:
    post:
      operationId: registerUser
      tags:
        - auth
      summary: Register the user
      description: Return the data of the registered user
      requestBody:
        description: Object needed to register the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: successfull registration and creation of user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: invalid request body
  /auth/password/recover:
    post:
      operationId: recoverPassword
      tags:
        - auth
      summary: send email that contains link to reset password
      description: Returns nothing when user with provided email is exist, otherwise return error.
      requestBody:
        description: object contain email to recover password
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john.doe@gmail.com
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '404':
          $ref: '#/components/responses/NotFoundError'
    patch:
      operationId: resetPassword
      tags:
        - auth
      summary: random link to provide new password
      description: this will be random link generated by server for user to provide their new password.
      requestBody:
        description: object contains new password
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  example: secret321
                confirmPassword:
                  type: string
                  example: secret321
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '400':
          description: bad request
  /auth/password/change:
    patch:
      operationId: changePassword
      tags:
        - auth
      summary: change password
      description: Returns nothing when password is changed successfully.
      requestBody:
        description: object contain email to recover password
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  example: secret123
                newPassword:
                  type: string
                  example: secret321
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '400':
          description: bad request (wrong old password)
      security:
        - bearerAuth: []
  /roles:
    get:
      operationId: getRoles
      tags:
        - roles
      summary: Get collections of roles
      description: Returns collections of roles
      responses:
        '200':
          description: succesful retrieval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
      security:
        - bearerAuth: []
    post:
      operationId: createRole
      tags:
        - roles
      summary: Add new role
      description: Returns the created role
      requestBody:
        description: object needed to create role
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRole'
      responses:
        '201':
          description: successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
      security:
        - bearerAuth: []
  /roles/{roleId}:
    get:
      operationId: getRole
      tags:
        - roles
      summary: Get single role
      description: Returns single role
      parameters:
        - name: roleId
          in: path
          description: ID of role to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: succesful retrieval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
    patch:
      operationId: updateRole
      tags:
        - roles
      summary: Update single roles
      description: Returns the updated roles
      parameters:
        - name: roleId
          in: path
          description: ID of role to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: object needed to update existing role
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRole'
      responses:
        '200':
          description: succesfull update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
    delete:
      operationId: deleteRole
      tags:
        - roles
      summary: Delete single role
      description: Returns nothing when deleting is success
      parameters:
        - name: roleId
          in: path
          description: ID of role to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
  /users:
    get:
      operationId: getUsers
      tags:
        - users
      summary: Get collections of users
      description: Returns collections of users
      responses:
        '200':
          description: successfull retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '204':
          $ref: '#/components/responses/SuccessNoContent'
      security:
        - bearerAuth: []
    post:
      operationId: addUser
      tags:
        - users
      summary: Add new user profile
      description: Returns the created user
      requestBody:
        description: Object needed to create new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '201':
          description: successfull creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: invalid request body
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
      security:
        - bearerAuth: []
  /users/{userId}:
    get:
      operationId: getUserById
      tags:
        - users
      summary: Get single user profile
      description: Returns single user profile
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successfull retrieval
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Profile'
                  - $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
    patch:
      operationId: updateUser
      tags:
        - users
      summary: Update single user
      description: Return the updated user
      parameters:
        - name: userId
          in: path
          description: ID of course to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Object needed to update existing user
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Profile'
      responses:
        '200':
          description: successfull update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: invalid request body
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
    delete:
      operationId: deleteUser
      tags:
        - users
      summary: Delete single user
      description: Returns nothing when user is deleted successfully
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
  /progresses:
    get:
      operationId: getProgresses
      tags:
        - progress
      summary: Get collections of progress
      description: Returns collections of progress
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
            format: int64
          example: 1
        - name: courseId
          in: query
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: successfull retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Progress'
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
      security:
        - bearerAuth: []
    post:
      operationId: addProgress
      tags:
        - progress
      summary: Add new progress
      description: Returns the created progress
      requestBody:
        description: Object needed to create new progress
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Progress'
      responses:
        '201':
          description: successfull creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Progress'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
      security:
        - bearerAuth: []
  /progresses/{progressId}:
    get:
      operationId: getProgressById
      tags:
        - progress
      summary: Get single progress
      description: Returns single progress
      parameters:
        - name: progressId
          in: path
          description: ID of progress to return
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: successfull retrieval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Progress'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
    patch:
      operationId: updateProgress
      tags:
        - progress
      summary: Update the progress
      description: Returns the updated progress
      parameters:
        - name: progressId
          in: path
          description: ID of progress to update
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        description: Object needed to update the existing progress
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Progress'
      responses:
        '200':
          description: successfull update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Progress'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
    delete:
      operationId: deleteProgress
      tags:
        - progress
      summary: Delete the progress
      description: Returns nothing when progress is deleted successfully
      parameters:
        - name: progressId
          in: path
          description: ID of progress to delete
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
  /orders:
    get:
      operationId: getOrders
      tags:
        - orders
      summary: Get collections of orders
      description: Returns collections of orders
      parameters:
        - name: userId
          in: query
          schema:
            type: integer
            format: int64
          example: 1
        - name: courseId
          in: query
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: successfull retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Progress'
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
      security:
        - bearerAuth: []
    post:
      operationId: addOrder
      tags:
        - orders
      summary: Add new order
      description: Returns the created order
      requestBody:
        description: Object needed to create new order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: successfull creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
      security:
        - bearerAuth: []
  /orders/{orderId}:
    get:
      operationId: getOrderById
      tags:
        - orders
      summary: Get single order
      description: Returns single order
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: successfull retrieval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
  /courses:
    get:
      operationId: getCourses
      tags:
        - courses
      summary: Get collections of courses
      description: Returns collections of courses
      responses:
        '200':
          description: successfull retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '204':
          $ref: '#/components/responses/SuccessNoContent'
    post:
      operationId: addCourse
      tags:
        - courses
      summary: Add new course
      description: Returns the created course
      requestBody:
        description: Object needed to create new course
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '201':
          description: successfull creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: invalid request body
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
      security:
        - bearerAuth: []
  /courses/{courseId}:
    get:
      operationId: getCourseById
      tags:
        - courses
      summary: Get single course
      description: Returns single course with all modules and contents
      parameters:
        - name: courseId
          in: path
          description: ID of course to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successfull retrieval
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Course'
                  - type: object
                    properties:
                      modules:
                        type: array
                        items:
                          $ref: '#/components/schemas/CourseModule'
        '404':
          $ref: '#/components/responses/NotFoundError'
    patch:
      operationId: updateCourse
      tags:
        - courses
      summary: Update single course
      description: Returns the updated course
      parameters:
        - name: courseId
          in: path
          description: ID of course to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Object needed to update the existing course
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: successfull update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: invalid request body
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
    delete:
      operationId: deleteCourse
      tags:
        - courses
      summary: Delete single course
      description: Returns nothing when course is deleted successfully
      parameters:
        - name: courseId
          in: path
          description: ID of course to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
  /courses/{courseId}/modules:
    get:
      operationId: getModules
      tags:
        - modules
      summary: Get collections of module
      description: Returns all module collections of specific course
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: succesful retrieval
    post:
      operationId: createModule
      tags:
        - modules
      summary: Create new module of specific course
      description: Returns the created course module
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Object needed to create new module
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseModule'
      responses:
        '201':
          description: succesful creation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CourseModule'
                  - oneOf:
                      - type: array
                        items: []
                      - type: array
                        items:
                          $ref: '#/components/schemas/CourseModule'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
      security:
        - bearerAuth: []
  /courses/{courseId}/modules/{moduleId}:
    get:
      operationId: getModuleById
      tags:
        - modules
      summary: Get single module
      description: Returns single module
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: moduleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successfull retrieval
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CourseModule'
                  - type: object
                    properties:
                      contents:
                        type: array
                        items:
                          $ref: '#/components/schemas/CourseContent'
        '404':
          $ref: '#/components/responses/NotFoundError'
    patch:
      operationId: updateModule
      tags:
        - modules
      summary: Update single module
      description: Return the updated module
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: moduleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Object needed to update existing module
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CourseModule'
      responses:
        '200':
          description: successfull update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseModule'
        '400':
          description: invalid request body
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
    delete:
      operationId: deleteModule
      tags:
        - modules
      summary: Delete single module
      description: Returns nothing when moduel is deleted successfully
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: moduleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
  /courses/{courseId}/modules/{moduleId}/contents:
    get:
      operationId: getContents
      tags:
        - contents
      summary: Get collections of module content
      description: Returns all content collections of specific module course
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: moduleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: succesful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseContent'
    post:
      operationId: createContent
      tags:
        - contents
      summary: Create new content of specific course module
      description: Returns the created content module
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: moduleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Object needed to create new content
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseContent'
      responses:
        '201':
          description: succesful createion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseContent'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
      security:
        - bearerAuth: []
  /courses/{courseId}/modules/{moduleId}/contents/{contentId}:
    get:
      operationId: getContentById
      tags:
        - contents
      summary: Get single content
      description: Returns single content
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: moduleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: contentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successfull retrieval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseContent'
        '404':
          $ref: '#/components/responses/NotFoundError'
    patch:
      operationId: updateContent
      tags:
        - contents
      summary: Update single content
      description: Return the updated content
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: moduleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: contentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Object needed to update existing content
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CourseContent'
      responses:
        '200':
          description: successfull update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseContent'
        '400':
          description: invalid request body
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
    delete:
      operationId: deleteContent
      tags:
        - contents
      summary: Delete single content
      description: Returns nothing when content is deleted successfully
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: moduleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: contentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
  /categories:
    get:
      operationId: getCategories
      tags:
        - categories
      summary: Get all categories
      description: Returns all categories
      responses:
        '200':
          description: successfull retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '204':
          $ref: '#/components/responses/SuccessNoContent'
    post:
      operationId: addCategory
      tags:
        - categories
      summary: Add new category
      description: Returns the created category
      requestBody:
        description: Object needed to create new category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: successfull creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: invalid request body
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
      security:
        - bearerAuth: []
  /categories/{categoryId}:
    get:
      operationId: getCategoryById
      tags:
        - categories
      summary: Get single category
      description: Returns single category
      parameters:
        - name: categoryId
          in: path
          description: ID of category to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successfull retrieval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          $ref: '#/components/responses/NotFoundError'
    patch:
      operationId: updateCategory
      tags:
        - categories
      summary: Update single category
      description: Returns the updated category
      parameters:
        - name: categoryId
          in: path
          description: ID of course to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Object needed to update existing category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: successfull update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: invalid request body
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
    delete:
      operationId: deleteCategory
      tags:
        - categories
      summary: Delete single category
      description: Returns nothing when category is deleted successfully
      parameters:
        - name: categoryId
          in: path
          description: ID of category to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbidenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserLogin:
      type: object
      properties:
        email:
          type: string
          example: iqbal.adudu@gmail.com
        password:
          type: string
          example: secret123
          writeOnly: true
    User:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1
              readOnly: true
            firstName:
              type: string
              example: iqbal
            lastName:
              type: string
              example: adudu
            username:
              type: string
              example: iqbaladudu
            userStatus:
              type: string
              enum:
                - inactive
                - active
              readOnly: true
            roleId:
              type: integer
              format: int64
              example: 1
        - $ref: '#/components/schemas/UserLogin'
        - type: object
          properties:
            createdAt:
              type: string
              example: 01/01/2023
              readOnly: true
            updatedAt:
              type: string
              example: 02/01/2023
              readOnly: true
    UserRole:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        name:
          type: string
          example: admin
    Address:
      type: object
      properties:
        jalan:
          type: string
          example: Jl. Soekarno hatta
        kecamatan:
          type: string
          example: Tanah Abang
        kabupaten:
          type: string
          description: kabupaten atau kota
          example: ponorogo
        provinsi:
          type: string
          example: Jawa Barat
        Negara:
          type: string
          example: Indonesia
    Profile:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int64
              example: 3
              readOnly: true
            gender:
              type: string
              enum:
                - Male
                - Female
                - Unknown
            birthDate:
              type: string
              example: 01/01/1999
            address:
              $ref: '#/components/schemas/Address'
            phone:
              type: string
              example: '08123456789'
            userId:
              type: integer
              format: int64
              example: 1
    Progress:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        userId:
          type: integer
          format: int64
          example: 1
        courseId:
          type: integer
          format: int64
          example: 1
        startDate:
          type: string
          default: today
        endDate:
          type: string
          default: 'null'
        completedContentId:
          type: array
          items:
            type: integer
            format: int64
            default: 'null'
    OrderItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        orderId:
          type: integer
          format: int64
          example: 1
        courseId:
          type: integer
          format: int64
          example: 1
        courseTypeId:
          type: integer
          format: int64
          example: 1
        price:
          type: number
          format: float
          example: 10.5
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        userId:
          type: integer
          format: int64
          example: 1
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        status:
          type: string
          enum:
            - pending
            - failed
            - success
          default: pending
          readOnly: true
        createdAt:
          type: string
          example: 01/01/2023
          readOnly: true
        updatedAt:
          type: string
          example: 01/01/2023
          readOnly: true
    CourseModule:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        title:
          type: string
          example: Grammar
        courseId:
          type: integer
          format: int64
          example: 1
          readOnly: true
        createdAt:
          type: string
          example: 01/01/2023
          readOnly: true
        updatedAt:
          type: string
          example: 02/01/2023
          readOnly: true
    Course:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        title:
          type: string
          example: Kursus Bahasa Inggris
        description:
          type: string
          example: Kursus bahasa inggris dengan metode paling mutakhir.
        price:
          type: number
          format: float
          example: 10.5
        duration:
          type: string
          example: 10 hours
        courseTypes:
          type: string
          enum:
            - Freemium
            - Premium
        userId:
          type: integer
          format: int64
          example: 10
        categoryId:
          type: integer
          format: int64
          example: 2
        modules:
          type: array
          items:
            $ref: '#/components/schemas/CourseModule'
        createdAt:
          type: string
          example: 01/01/2023
          readOnly: true
        updatedAt:
          type: integer
          example: 01/01/2023
          readOnly: true
    CourseAssets:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        contentId:
          type: integer
          format: int64
          example: 1
        mediaType:
          type: string
          enum:
            - document
            - image
            - video
        url:
          type: string
          example: https://my-bucket.s3.us-west-2.amazonaws.com
    CourseContent:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        title:
          type: string
          example: Pengertian Grammar
        description:
          type: string
          example: Grammar adalah himpunan dari aturan-aturan yang terstruktur yang mengatur susunan kalimat, frase, dan kata dalam bahasa apapun.
        moduleId:
          type: integer
          format: int64
          example: 1
          readOnly: true
        assets:
          type: array
          items:
            $ref: '#/components/schemas/CourseAssets'
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        name:
          type: string
          example: Hard Skill
        createdAt:
          type: string
          example: 01/01/2023
          readOnly: true
        updatedAt:
          type: string
          example: 01/01/2023
          readOnly: true
  responses:
    SuccessNoContent:
      description: Successfull operation (no content to return)
    UnauthorizedError:
      description: Access token is missing or invalid
    NotFoundError:
      description: Not found / invalid resource ID
    ForbidenError:
      description: Token is valid but operation is not allowed
    BadRequestError:
      description: Invalid request body
security: []
