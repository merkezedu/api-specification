openapi: '3.0.2'
info:
  title: Merkez API Specification
  version: '0.1'
  description: |-
    API Specification for Merkez institute, based on [software requirements document](https://whimsical.com/software-requirements-specification-AHLth8LbaqS17rmKiEQAyd).
    This specification is the single source of truth for Merkez REST API.
  termsOfService: 'https://www.merkez.com/terms'
  contact:
    name: API Support
    email: support@merkez.com
    url: 'https://www.merkez.com/support'
servers:
  - url: https://dev.merkez.com/v1
    description: Development Server
  - url: https://staging.merkez.com/v1
    description: Staging Server
  - url: https://api.merkez.com/v1
    description: Production Server
paths:
  /courses:
    get:
      tags:
        - courses
      summary: Get all courses
      description: Returns all courses
      responses:
        '200':
          description: successfull retrieval
    post:
      tags:
        - courses
      summary: Add new course
      description: Returns the created course
      requestBody:
        description: Object needed to create new course
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '201':
          description: successfull creation
  /courses/{courseId}:
    get:
      tags:
        - courses
      summary: Get single course
      description: Returns single course
      parameters:
        - name: courseId
          in: path
          description: ID of course to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successfull retrieval
    put:
      tags:
        - courses
      summary: Update single course
      description: Returns the updated course
      requestBody:
        description: Object needed to update the existing course
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: successfull update
    delete:
      tags:
        - courses
      summary: Delete single course
      description: Returns the deleted course
      parameters:
        - name: courseId
          in: path
          description: ID of course to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successfull deletion
  /categories:
    get:
      tags:
        - categories
      summary: Get all categories
      description: Returns all categories
      responses:
        '200':
          description: successfull retrieval
    post:
      tags:
        - categories
      summary: Add new category
      description: Returns the created category
      requestBody:
        description: Object needed to create new category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: successfull creation
  /categories/{categoryId}:
    get:
      tags:
        - categories
      summary: Get single category
      description: Returns single category
      parameters:
        - name: categoryId
          in: path
          description: ID of category to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successfull retrieval
    put:
      tags:
        - categories
      summary: Update single category
      description: Returns the updated category
      requestBody:
        description: Object needed to update existing category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: successfull update
    delete:
      tags:
        - categories
      summary: Delete single category
      description: Returns the deleted category
      parameters:
        - name: categoryId
          in: path
          description: ID of category to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successfull deletion
  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: Returns all users
      responses:
        '200':
          description: successfull retrieval
    post:
      tags:
        - users
      summary: Add new user
      description: Returns the created user
      requestBody:
        description: Object needed to create new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: successfull creation
  /users/{userId}:
    get:
      tags:
        - users
      summary: Get single user
      description: Returns single user
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successfull retrieval
    put:
      tags:
        - users
      summary: Update single user
      description: Return the updated user
      requestBody:
        description: Object needed to update existing user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successfull update
    delete:
      tags:
        - users
      summary: Delete single user
      description: Returns the deleted user
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successfull deletion
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          example: iqbal.adudu@gmail.com
        password:
          type: string
          example: secret123
        username:
          type: string
          example: iqbaladudu
        firstName:
          type: string
          example: iqbal
        lastName:
          type: string
          example: adudu
        phone:
          type: string
          example: '08123456789'
        userStatus:
          type: string
          description: User status active or inactive
          enum:
            - active
            - inactive
    Mentor:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 1
    Mentee:
      type: object
      properties:
        userId:
          type: integer
          format: int64
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Hard Skill
    Course:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Kursus Bahasa Inggris
        mentorId:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
  requestBodies:
    Course:
      description: Object needed to create the course
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Course'